stages:
  - build
  - deploy

# https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
build-vetrinadolci-site:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/site.dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/vetrinadolci-site:${CI_COMMIT_TAG}"
#   rules:
#     - if: $CI_COMMIT_TAG =~ /release-/

build-identity:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/identity.dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/vetrinadolci-identity:${CI_COMMIT_TAG}"
#   rules:
#     - if: $CI_COMMIT_TAG =~ /release-/

build-api:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/api.dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/vetrinadolci-api:${CI_COMMIT_TAG}"
#   rules:
#     - if: $CI_COMMIT_TAG =~ /release-/

deploy:
  stage: deploy
  image: debian
  variables:
    SERVER: "$DEV_SERVER"
    USER: "$DEV_USER"
    PASSWORD: "$DEV_PASSWORD"
    TEMP_FOLDER: "/temp-gitlab"
  before_script:
    - echo "install utils"
    - apt-get update -qy
    - apt-get install -y lftp sshpass openssh-client
    - echo "SSH add trust host"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - echo "LFTP fix trust host"
    - mkdir ~/.lftp
    - echo "set ssl:verify-certificate no" >> ~/.lftp/rc
  script:
    - echo "update docker image"
    - sshpass -p $PASSWORD ssh $USER@$SERVER docker pull ${CI_REGISTRY_IMAGE}/vetrinadolci-site:latest
    - sshpass -p $PASSWORD ssh $USER@$SERVER docker pull ${CI_REGISTRY_IMAGE}/vetrinadolci-identity:latest
    - sshpass -p $PASSWORD ssh $USER@$SERVER docker pull ${CI_REGISTRY_IMAGE}/vetrinadolci-api:latest
    - echo "create gitlab temp directory..."
    - echo "copy docker-compose files into gitlab temp directory..."
    - >-
      lftp -e "set ftp:ssl-protect-data true ;
      rmdir $TEMP_FOLDER/${CI_PROJECT_NAME} ;
      mkdir $TEMP_FOLDER/${CI_PROJECT_NAME} ;
      put -O $TEMP_FOLDER/${CI_PROJECT_NAME} ${CI_PROJECT_DIR}/docker/docker-compose.prod.yml ;
      exit"
      -u $USER,$PASSWORD sftp://$SERVER
    - echo "update docker container"
    - sshpass -p $PASSWORD ssh $USER@$SERVER docker-compose --file $TEMP_FOLDER/${CI_PROJECT_NAME}/docker-compose.prod.yml --project-name ${CI_PROJECT_NAME}-prod up -d
    - echo "clean temp directory"
    - sshpass -p $PASSWORD ssh $USER@$SERVER rm -R $TEMP_FOLDER/${CI_PROJECT_NAME}
    - echo "info container"
    - sshpass -p $PASSWORD ssh $USER@$SERVER docker inspect vetrina-dolci-site
    - sshpass -p $PASSWORD ssh $USER@$SERVER docker inspect VetrinaDolci.IdentityServer
    - sshpass -p $PASSWORD ssh $USER@$SERVER docker inspect VetrinaDolci.WebApi
#   rules:
#     - if: $CI_COMMIT_TAG =~ /release-/